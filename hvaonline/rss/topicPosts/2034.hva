<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title><![CDATA[Latest posts for the topic "Forging HTTP Request Headers with Flash ActionScript"]]></title>
		<link>http://www.hvaonline.net/hvaonline/posts/list/13.hva</link>
		<description><![CDATA[Latest messages posted in the topic "Forging HTTP Request Headers with Flash ActionScript"]]></description>
		<generator>JForum - http://www.jforum.net</generator>
			<item>
				<title>Forging HTTP Request Headers with Flash ActionScript</title>
				<description><![CDATA[ Dành cho những ai "quan tâm" đến x-flash. 

Đối với người dùng bình thường không muốn tiếp tay cho những trò phá hoại này, nên nâng cấp thành Flash 9 (miễn phí).

Nhóm dịch thuật HVA sẽ chuyển ngữ bài này trong một ngày gần đây.

<span class="quotetxt"><b>Code:</b></span><br/>
		<div class="coded"">
		<pre>This write-up presents the mechanism that can be used to send arbitrary 
HTTP requests via Flash ActionScript. The security consequences for this 
ability are also discussed here.

DETAILS

Flash - Introduction
-===================

Flash player is a very popular browser add-on from Adobe &#40;actually, Flash 
was invented by Macromedia, which was acquired
by Adobe&#41;. This write-up covers mostly Flash 7 and Flash 8, together 
covering more than 94% of the Internet-enabled desktops &#40;according to NPD 
Online Survey conducted April 2006, quoted in Adobe's website &#91;1&#93;, &#91;2&#93;&#41;. 
Flash movies are delivered as SWF &#40;ShockWave File&#41; files. Adobe developed 
a rich Javascript-like language called ActionScript to provide scripting 
capabilities to Flash. One of the interesting features of ActionScript is 
its ability to send HTTP requests to 3rd party sites through the browser 
which invoked it. This is where Flash becomes interesting security-wise. 
With Flash it is possible to shape an outgoing request to a 3rd party site 
in ways not available from within "standard" Javascript. Specifically of 
interest is Flash's ability to send arbitrary HTTP request headers with 
outgoing HTTP requests.


Sending arbitrary HTTP request headers with Flash
-================================================

The following is ActionScript 2.0 syntax for sending out a GET request &#40;in 
this example, to<span class="link"> http://www.vuln.site/some/page.cgi?p1=v1&p2=v2&#41;</span> with an 
arbitrary HTTP header &#40;Foo: Bar&#41;. This code works with Flash 7 and Flash 8 
&#40;probably with Flash 6 as well&#41;:

var req:LoadVars=new LoadVars&#40;&#41;;
req.addRequestHeader&#40;"Foo","Bar"&#41;;
req.send&#40;"http://www.vuln.site/some/page.cgi?p1=v1&p2=v2",
         "_blank","GET"&#41;;

A similar syntax will send POST request &#40;with the same header, to the same 
URL, and with body a=b&c=d&#41;:

var req:LoadVars=new LoadVars&#40;&#41;;
req.addRequestHeader&#40;"Foo","Bar"&#41;;
req.decode&#40;"a=b&c=d"&#41;;
req.send&#40;"http://www.vuln.site/some/page.cgi?p1=v1&p2=v2",
         "_blank","POST"&#41;;

&#40;note: the LoadVars.decode&#40;&#41; method was added in Flash 7, yet it's 
probably possible to compose an arbitrary POST body without it, so Flash 6 
may be covered as well by this variant&#41;.

The request is sent from the browser invoking the Flash object. Any 
cookies the browser normally sends, will be sent in those cases as well. 
The browser's User-Agent is sent, as well as all browser standard headers. 
HTTPS links are supported.

This was successfully demonstrated with Microsoft IE 6.0, Microsoft IE 6.0 
SP2 and FireFox 1.5.0.4, running Flash 8.0.22.0 and Flash 7.0.19.0.

In IE, it is possible to overwrite some "normal" browser headers by simply 
calling addRequestHeader with the new value. This is applicable to both 
Referer and User-Agent. In FireFox 1.5.0.4, such headers, when used in 
addRequestHeader&#40;&#41; will be appended to the HTTP request header section.

// One UA in IE 6.0 SP2, two UAs in FF 1.5.0.4
req.addRequestHeader&#40;"User-Agent","Hacker/1.0"&#41;;

// One Referer in IE 6.0 SP2, two Referers in FF 1.5.0.4
req.addRequestHeader&#40;"Referer","http://somewhere/"&#41;;

In IE, it is also possible to overwrite some more sensitive headers &#40;e.g. 
Host and Content-Length&#41; by appending colon to the header name &#40;this 
technique was described in &#91;3&#93; in the context of XmlHttpRequest&#41;:

req.addRequestHeader&#40;"Host:","foobar.site"&#41;;

This technique doesn't appear to work in FireFox 1.5.0.4.

Note: when the target URL is in the same domain with the Flash movie, 
LoadVars may be used to read the HTTP response data, thus making LoadVars 
the basis for many Flash-based AJAX-like frameworks &#40;in analogy to 
Javascript's XmlHttpRequest object&#41;.


The security implications
-========================

The ability of an attacker to force a victim's browser to send HTTP 
requests to 3rd party sites with arbitrary HTTP request headers has impact 
on our understanding of web application security - both on assessment of 
security-related phenomena, and on the validity of some security 
mechanisms.

It is important to understand that the attacks described here are &#40;in 
themselves&#41; not cross-site scripting attacks, neither are they &#40;strictly 
speaking&#41; any breach of cross-domain trust in the Flash object or between 
the Flash object and the embedding HTML page. They merely make use of the 
fact that it's possible to send requests from a Flash object to any URL, 
with almost any HTTP headers the attacker needs. This in itself is the 
problem, as it enables an attacker to send a link &#40;to an HTML page 
embedding a Flash object, or directly to a Flash object residing at the 
attacker's website&#41; that will cause a Flash object to be executed in the 
victim's browser. This Flash object will send the HTTP request &#40;with HTTP 
headers chosen by the attacker&#41; to a target website, and this in turn will 
compromise the security of the browser &#40;victim&#41;.

In other words, the implicit assumption made by many software developers 
&#40;and probably also by many security researchers&#41; that most HTTP headers 
cannot be forced to have arbitrary values by an attacker who serves data 
to the victim browser is shown to be in error in this write-up.

Example 1 - The "Expect" header
-------------------------------

In &#91;4&#93;, an injection problem was described wherein Apache 1.3.34, 2.0.57 
and 2.2.1 are vulnerable to injecting HTML data &#40;including malicious 
Javascript code&#41; through the Expect header. In &#91;5&#93;, yours truly commented, 
with respect to this issue, that "Regarding XSS This phenomenon is not XSS 
per-se. Unless someone can show me how it is possible to force a browser 
to send the Expect header to the target site". But using a Flash object, 
the attack is trivial &#40;the author is therefore answering his own question 
here...&#41;. Consider a victim &#40;browser&#41; that clicks the following link: <span class="link"> http://www.evil.site/attack.swf</span>

This URL represents a Flash object that runs the following ActionScript 
code:

  var req:LoadVars=new LoadVars&#40;&#41;;
  req.addRequestHeader&#40;"Expect",
                       "&lt;script&gt;alert&#40;'gotcha!'&#41;&lt;/script&gt;"&#41;;
  req.send&#40;"http://www.target.site/","_blank","GET"&#41;;

This ActionScript sends a request from the victim's browser, to the target 
website &#40;www.target.site&#41; with an Expect header containing malicious HTML 
&#40;Javascript&#41; code. If the target website runs a vulnerable version of 
Apache, the net result is cross site scripting. So to be clear - there's a 
working XSS attack against Apache 1.3.34, 2.0.57 and 2.2.1 &#40;as long as the 
client browser is IE or Firefox, and it supports Flash 6/7+&#41;. As noted in 
&#91;5&#93;, for Apache 2.0/2.2 the XSS response is returned by the server only 
after the request timeout elapses &#40;typically few minutes&#41;. Please note 
though that a fix for the Apache server is available at all 3 branches &#40;as 
Apache 1.3.35, 2.0.58 and 2.2.2 respectively&#41;.

Example 2 - CSRF and Referer
----------------------------

CSRF &#40;Cross Site Request Forgery&#41; attack is in essence the ability of an 
attacker to force a victim &#40;browser&#41; to effectively perform an action 
&#40;send HTTP request&#41; in a target site. This concept emerged several times, 
the first one probably on the Zope mailing list &#40;as "Client Side Trojans", 
&#91;6&#93;, and another time on BugTraq, under its now de-facto standard name, 
CSRF &#91;7&#93;. Both references suggest, among other measures, to rely on the 
HTTP Referer header as evidence that the browser emits the HTTP request 
from a link originating in the website. Indeed, considering the 
capabilities of HTML+Javascript, effectively spoofing the Referer is 
nearly impossible &#40;one exception is &#91;8&#93;, but it is effective only in a 
limited subset of scenarios; e.g. it is not effective when HTTPS is used&#41;. 
However, as can clearly be understood, with Flash this no longer holds, 
and Referer can be spoofed for requests to HTTPS resources, all the while 
having the browser send the site's cookies with the request. As 
demonstrated above, both GET requests &#40;with arbitrary host and query 
parts&#41; and POST requests &#40;with arbitrary host and query parts, and body in 
the standard Content-Type format of "application/x-www-form-urlencoded"&#41; 
can be sent.

Note: there are many other reasons not to rely on the Referer header, and 
this text is by no means the first one to warn against this practice.
It should be obvious that any reasonable header &#40;and combinations thereof&#41; 
can be spoofed. In IE's case, the header provided by the attacker can 
replace the browser-provided header &#40;e.g. Referer&#41;.
In Firefox's case, the Referer spoofing technique may fail because Firefox 
adds the header at the bottom of the HTTP request headers. Still, some web 
applications may use the last value of the header, and as such be 
vulnerable to this technique.

Plainly put, all this means that &#40;reflective&#41; cross site scripting attacks 
that make use of HTTP request headers &#40;e.g. Referer, User-Agent, Expect, 
Host, Content-Type&#41; to send the payload are now possible.


Flash 9
-======

Flash 9 was announced June 28th, 2006 &#91;9&#93; &#40;i.e. less than a month ago&#41;. In 
Flash 9, the techniques described above &#40;for the LoadVars class&#41; do not 
work for any browser-provided header &#40;e.g. User-Agent, Host and Referer&#41;, 
nor probably for many "protected" headers such as Content-Length. Still, 
headers like Expect can be sent, so some attacks &#40;e.g. Example 1 above&#41; 
are still effective with Flash 9.


Limitations of the technique
-===========================

 * The URL and the body part will always be URL-encoded. That is, it is 
impossible &#40;so it seems&#41; to force SP, HT, CR and   LF &#40;and probably many 
other characters&#41; to appear in their raw form in the request URL and body.
 * Only GET and POST methods can be used.
 * In IE, only one instance of each header can be sent.

 * At large, the header section cannot be completely controlled, e.g. an 
attacker may have problems when attempting to send special characters 
inside headers.

Partial solution
-===============

Notice the first limitation of the technique - it states that no raw CR 
and LF can be placed in the body section. This means that the technique 
cannot be used to send &#40;POST&#41; requests whose body complies with the 
"multipart/form-data" content-type format &#40;this format uses raw CRs and 
LFs to mark headers and boundaries&#41;. In other words, a &#40;POST&#41; request 
whose body is a valid "multipart/form-data" stream is guaranteed &#40;as far 
as today's knowledge extends&#41; not to be sent from a Flash player. Web 
application authors can therefore use HTML forms whose ENCTYPE attribute 
is set to "multipart/form-data", and enforce that the submission contains 
a valid multipart/form-data body. Once these mechanisms are in place, and 
a request passes through, it is known not to originate from a Flash 
player, so the attack
described here is irrelevant.

This solution is of course intrusive - both the HTML pages and the 
receiving scripts must be altered to use &#40;and enforce&#41; 
multipart/form-data. With some web development platforms, this is trivial, 
yet in others &#40;e.g. raw Perl, and ASP&#41; it is not. Furthermore, in cases 
such as Example 1 above, the HTTP headers are interpreted and used by the 
&#40;Apache&#41; web server, and the control never reaches the web application 
layer, so in such cases, this solution is not applicable.

Future directions
-================

HTTP Request Splitting &#40;&#91;8&#93;&#41; and HTTP Request Smuggling &#40;&#91;10&#93;&#41; - in IE + 
Flash 7/8 it is possible to send a Content-Length header with any value. 
This opens up an opportunity to perform HTTP Request Splitting attacks. 
Also, injecting Transfer-Encoding header, or a second Content-Length 
header may open up HTTP Request Smuggling. Further research is needed in 
order to understand whether these directions lead to viable exploitation 
techniques.

Flash 9 - while experiments show that Flash 9 is more strict concerning 
which headers can be specified through LoadVars.addRequestHeader&#40;&#41;, it's 
ActionScript 3.0 language is much richer than ActionScript 2.0. As such, 
it may open up several interesting opportunities at the HTTP level, e.g. 
the ability to send various HTTP methods, not just GET and POST &#40;WebDAV 
anyone?&#41;. Flash 9 and ActionScript 3.0 should be studied better in order 
to understand what is their potential with respect to crafting HTTP 
requests.


Conclusions
-==========

Relying on the authenticity of HTTP request headers when they are sent 
from a browser is not a good idea. Practically every header can be spoofed 
if the client can be forced to run a malicious Flash movie, and this is 
probably applicable to over 80% of the Internet desktops &#40;i.e. Internet 
desktops running IE + Flash 7/8&#41;. Consequently, the applicability of cross 
site scripting attacks based on such headers, as well as cross site 
request forgery attacks &#40;against sites which protect themselves by 
checking the Referer header&#41; is higher than many people may perceive.

A partial solution to the latter case was suggested in the write-up, 
however it is strongly tied to the specific technology used - Flash, and 
as such may not provide any protection against variants that make use of a 
different technology, or against developments in Flash itself. For 
cross-site request forgery, therefore, different solutions, not relying on 
Referer, should be considered.

References
-=========

&#91;1&#93; "Technology Breakdown" &#40;Adobe website&#41;  
&lt;http://www.adobe.com/products/player_census/flashplayer/tech_breakdown.html&gt;<span class="link"> http://www.adobe.com/products/player_census/flashplayer/tech_breakdown.html</span>

&#91;2&#93; "Macromedia Flash Player Version Penetration" &#40;Adobe website&#41;  
&lt;http://www.adobe.com/products/player_census/flashplayer/version_penetration.html&gt;<span class="link"> http://www.adobe.com/products/player_census/flashplayer/version_penetration.html</span>

&#91;3&#93; "Re: 'Exploiting the XmlHttpRequest object in IE' - paper by Amit 
Klein" by Anonymous, BugTraq posting, September 27th, 2005 
&lt;http://www.securityfocus.com/archive/1/411823&gt; <span class="link"> http://www.securityfocus.com/archive/1/411823</span>

&#91;4&#93; "Unfiltered Header Injection in Apache 1.3.34/2.0.57/2.2.1" by Thiago 
Zaninotti, BugTraq posting, May 8th, 2006  
&lt;http://www.securityfocus.com/archive/1/433280&gt; <span class="link"> http://www.securityfocus.com/archive/1/433280</span>

&#91;5&#93; "Re: Unfiltered Header Injection in Apache 1.3.34/2.0.57/2.2.1" by 
Amit Klein, BugTraq posting, May 18th, 2006  
&lt;http://www.securityfocus.com/archive/1/434729&gt; <span class="link"> http://www.securityfocus.com/archive/1/434729</span>

&#91;6&#93; "Client Side Trojans", Zope developers mailing list, May 2000  
&lt;http://www.zope.org/Members/jim/ZopeSecurity/ClientSideTrojan&gt; <span class="link"> http://www.zope.org/Members/jim/ZopeSecurity/ClientSideTrojan</span>

&#91;7&#93; "Cross Site Request Forgeries" by Peter Watkins, BugTraq posting, June 
15th, 2001  &lt;http://www.tux.org/~peterw/csrf.txt&gt; <span class="link"> http://www.tux.org/~peterw/csrf.txt</span>

&#91;8&#93; "Exploiting the XmlHttpRequest object in IE - Referrer spoofing, and a 
lot more..." by Amit Klein, BugTraq posting,
September 24th, 2005  &lt;http://www.securityfocus.com/archive/1/411585&gt; <span class="link"> http://www.securityfocus.com/archive/1/411585</span>

&#91;9&#93; "Adobe Flash Player 9 Leads a New Generation of Dynamic Media and Rich 
Internet Applications" &#40;Adobe website&#41;, June 28th, 2006  
&lt;http://www.adobe.com/aboutadobe/pressroom/pressreleases/200606/062806Flash9.html&gt;<span class="link"> http://www.adobe.com/aboutadobe/pressroom/pressreleases/200606/062806Flash9.html</span>

&#91;10&#93; "HTTP Request Smuggling" by Chaim Linhart, Amit Klein, Ronen Heled 
and Steve Orrin, June 6th, 2005  
&lt;http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf&gt; <span class="link"> http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</span></pre>
		</div>]]></description>
				<guid isPermaLink="true">http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10355</guid>
				<link>http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10355</link>
				<pubDate><![CDATA[Thu, 27 Jul 2006 11:27:31]]> GMT</pubDate>
				<author><![CDATA[ conmale]]></author>
			</item>
			<item>
				<title>Forging HTTP Request Headers with Flash ActionScript</title>
				<description><![CDATA[ Hi vọng các bác Translate sớm chứ em đọc không hiểu gì. nhưng cái này hấp dẫn quá]]></description>
				<guid isPermaLink="true">http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10373</guid>
				<link>http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10373</link>
				<pubDate><![CDATA[Thu, 27 Jul 2006 12:14:24]]> GMT</pubDate>
				<author><![CDATA[ BigballVN]]></author>
			</item>
			<item>
				<title>Forging HTTP Request Headers with Flash ActionScript</title>
				<description><![CDATA[ Em cũng vậy, các translate của HVA làm việc giúp anh em để hiểu thêm về vấn đề này.
xFlash này có vẻ nguy hiểm lắm]]></description>
				<guid isPermaLink="true">http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10537</guid>
				<link>http://www.hvaonline.net/hvaonline/posts/list/2034.hva#10537</link>
				<pubDate><![CDATA[Fri, 28 Jul 2006 00:01:55]]> GMT</pubDate>
				<author><![CDATA[ t0ny4n]]></author>
			</item>
			<item>
				<title>Forging HTTP Request Headers with Flash ActionScript</title>
				<description><![CDATA[ <p></p>
		<cite class="blockquote">Bigball_hacker wrote:</cite><br>
		<blockquote>Hi vọng các bác Translate sớm chứ em đọc không hiểu gì. nhưng cái này hấp dẫn quá&nbsp;
		</blockquote>

hakuso đã dịch ở đây:<span class="link"> http://www.hvaonline.net/hvaonline/posts/list/2176.hva#11128</span>]]></description>
				<guid isPermaLink="true">http://www.hvaonline.net/hvaonline/posts/list/2034.hva#11135</guid>
				<link>http://www.hvaonline.net/hvaonline/posts/list/2034.hva#11135</link>
				<pubDate><![CDATA[Sun, 30 Jul 2006 14:28:58]]> GMT</pubDate>
				<author><![CDATA[ conmale]]></author>
			</item>
			<item>
				<title>Forging HTTP Request Headers with Flash ActionScript</title>
				<description><![CDATA[ Khốn khổ rồi.

Thời buổi sóng gió thế này lão conmale lại mang cái document này về đây.Vậy là cho dù là bản Flash player 9 không support việc modify các header mà trình duyệt dùng nhưng mà cũng ngay hiểm vì cái hàm cơ bản là LoadVariableNum Hay LoadMovieNum lại không đc xóa,việc modify chỉ tăng phần phá hoại cho cái X-Flash,vậy nên cho cùng thì Adobe cũng không ngăn tới nơi tới chốn các điểm yếu này mà lại chỉ fix qua loa,tức là việc modify header vẫn thực hiện đc nhưng có phần hạn chế thôi ...... Tai họa ,tai họa]]></description>
				<guid isPermaLink="true">http://www.hvaonline.net/hvaonline/posts/list/2034.hva#11169</guid>
				<link>http://www.hvaonline.net/hvaonline/posts/list/2034.hva#11169</link>
				<pubDate><![CDATA[Sun, 30 Jul 2006 15:44:02]]> GMT</pubDate>
				<author><![CDATA[ xnohat]]></author>
			</item>
	</channel>
</rss>
