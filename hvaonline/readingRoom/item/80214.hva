<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 

<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<meta name="description" content="HVA Reading Room">
<meta name="keywords" content=", reading room, hva, hvaonline, hvazone, hvaforum">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">
<meta name="robots" content="index,follow">
<meta name="rating" content="general">
<style type="text/css">
<!-- 
@import url( "http://www.hvaonline.net/hvaonline/templates/viet/styles/style.css");
-->
</style>
<style type="text/css">
<!--
@import url("http://www.hvaonline.net/hvaonline/templates/viet/styles/en_US.css");
-->
</style>
<title> - .:: HVAOnline ::.</title>

</head>
<body class="en_US">


<!--
Original theme from phpBB (http://www.phpbb.com) subSilver
Created by subBlue design
http://www.subBlue.com
Modifications by JForum Team 
Extended and customised by HVA Team
Added more features and Black Silver theme designed by HVA
-->
<table width="100%" border="0" cols="2">
	<tr align="right">
		<td class="copyright">
			English
			| 
			<a href="/hvaonline/jforum.hva?module=forums&amp;action=setLang&amp;lang=vi_VN" rel="nofollow">Vietnamese</a>
		</td>
	</tr>
</table>
<table width="100%" border="0" align="center">
	<tr>
        <td width="100%" align="center" valign="middle">
			<a href="http://www.hvaonline.net" title="[Logo]"><img src="http://www.hvaonline.net/hvaonline/templates/viet/images/hvabanner-final.gif" alt="banner" /></a>
		</td>
	</tr>

	<tr>
		<td>
<table cellspacing="0" cellpadding="0" width="80%" align="center" border="0">

		<tr height="15">
			<th colspan="2" class="thportal" align="left"><span class="readingheader">&nbsp;.::Defense::.</span></th>
		    <th class="thportal" align="center">
				<span class="readingheader">
					 Những điều cần biết về SSL <a name="topPage" id="topPage"></a>
				</span>
			</th>
		    <th class="thportal" align="right">
				<a href="/hvaonline/posts/list/0/13472.hva#80214" target="_blank">
				<img src="/hvaonline/templates/viet/images/goright.gif" align="absbottom" border="0" alt="Go to original post" title="Go to original post"/></a> 
				<img src="/hvaonline/templates/viet/images/what.gif" align="absbottom" border="0" alt="Author: Vicky group - Translator:  - Entry Date: 14/02/2009 00:07:07" title="Author: Vicky group - Translator:  - Entry Date: 14/02/2009 00:07:07"/>
			</th>
		</tr>
</table>

<table cellspacing="0" cellpadding="5" width="80%" align="center" border="0">
		<tr>
		    <td align="left" colspan="2" class="readingborderBottom">
				<table cellspacing="0" cellpadding="10" width="95%" align="center" border="0">
					<tr>
						<td align="left">
							<div class="postbody"><font size='+1'><font color='yellow'>I. Giới thiệu về SSL</font></font><br/> <br/> <b>1.1 SSL là gì?</b><br/> <br/> SSL(Secure Socket Layer) là một giao thức(protocol) cho phép bạn truyền đạt thông tin một cách an toàn qua mạng.<br/> <br/> <b>1.2 Thuật toán mã hóa</b><br/> <br/> Mã hóa(encrypt) và giải mã(decrypt) thông tin dùng các hàm toán học đặt biệt được biết đến với cái tên là thuật toán mã hóa (cryptographic algorithm) và thường được gọi tắt là cipher.<br/> <br/> <b>1.3 Khóa là gì?</b><br/> <br/> Khóa(key) là một thông tin quan trọng dùng để mã hóa thông tin hoặc giải mã thông tin đã bị mã hóa. Bạn có thể hiểu nôm na khóa là mật khẩu(password).<br/> <br/> <b>1.4 Các phương pháp mã hóa</b><br/> <br/> Có hai phương pháp mã hóa được sử dụng phổ biến hiện nay là mã hóa bằng khóa đối xứng và mã hóa dùng cặp khóa chung - khóa riêng..<br/> <br/> <b>1.4.1 Mã hóa bằng khóa đối xứng(symmetric-key)</b><br/> <br/> <br/> <br/> Khóa dùng để mã hóa cũng là khóa dùng để giải mã.<br/> <br/> <b>1.4.2 Mã hóa dùng cặp khóa chung - khóa riêng (public key - private key)</b><br/> <br/> Một khe hở trong mã hóa đối xứng là bạn phải chuyển khóa cho người nhận để họ có thể giải mã. Việc chuyển khóa không được mã hóa qua mạng là một điều cực kì mạo hiểm. Nhở như khóa này rơi vào tay người khác thế là họ có thể giải mã được thông tin mà bạn đã chuyển đi. Phương pháp mã hóa bằng khóa chung - khóa riêng ra đời nhằm giải quyết vấn đề này. Thay vì chỉ có một khóa duy nhất dùng chung cho mã hóa và giải mã, bạn sẽ có một cặp khóa gồm khóa chung chỉ dùng để mã hóa và khóa riêng chỉ dùng để mã hóa. Bạn cho người khác biết khóa chung của bạn để họ mã hóa các thông tin gởi đến bạn. Chỉ có bạn mới có khóa riêng để giải mã các thông tin này. Nhở như thông tin này có rơi vào tay người khác thì họ cũng không thể giải mã được vì chỉ có bạn mới có khóa riêng mà.<br/> <br/> <br/> <br/> <b>1.5. Độ dài khóa (key-length)</b><br/> <br/> Độ dài khóa được tính theo bit: 128bit, 1024bit hay 2048bit,... Khóa càng dài thì càng khó phá. Chằng hạn như khóa RSA 1024bit đồng nghĩa với việc chọn 1 trong 2^1024 khả năng.<br/> <br/> <b>1.6 Password & passparse</b><br/> <br/> Password và passparse gần giống nhau. Password không bao giờ hết hạn(expire). Passparse chỉ có hiệu lực trong một khoảng thời gian nhất định có thể là 5 năm, 10 năm hay chỉ là vài ba ngày. Sau thời gian đó, bạn phải thay đổi lại mật khẩu mới. Nói chung, mọi thứ trong SSL như passparse, khóa, giấy chứng nhận, chữ kí số (sẽ nói sau), ... đều chỉ có thời hạn sử dụng nhất định. Passparse được dùng để mở (mã hóa/giải mã) khóa riêng.<br/> <font color='yellow'><font size='+1'>II. Cơ chế làm việc của SSL</font></font><br/> <br/> Để dễ hiểu, phần này sẽ trình bày qua ví dụ cụ thể: Alice trao đổi thông tin với Bob bằng công nghệ khóa chung. {something}key có nghĩa là something được mã hóa hoặc giải mã bằng key.<br/> <br/> Alice cần chắc chắn là mình sẽ nói chuyện với Bob mà không phải là một ai khác. Alice sẽ tiến hành xác thực(authenticate) Bob.Bob có một cặp khóa gồm một khóa chung và một khóa riêng. Bob cho Alice biết trước khóa chung của mình (sẽ nói sau bằng cách nào). Alice tạo ra một thông điệp ngẫu nhiên(random message) và gởi nó đến Bob:<br/> <br/> <blockquote>A-&gt;B message ngẫu nhiên&nbsp;<br/> 		</blockquote><br/> <br/> Bob dùng khóa riêng của mình để mã hóa thông điệp vừa nhận được và gởi trả lại cho Alice:<br/> <br/> <blockquote>B-&gt;A {message ngẫu nhiên}khóa-riêng-của-bob&nbsp;<br/> 		</blockquote><br/> <br/> Alice nhận được message từ Bob, dùng khóa chung của Bob để giải mã message này và sau đó so sánh message vừa giải mã được với random-message đã gởi đi. Nếu giống nhau, Alice có thể tin chắc rằng mình đang nói chuyện với Bob.<br/> <br/> <b>1. Bản tóm tắt (digest)</b><br/> <br/> Thay vì phải mã hóa toàn bộ message nhận được từ Alice, Bob có thể xây dựng một bản tóm tắt(digest) của message bằng hàm băm một chiều (hash one-way), sau đó mã hóa digest bằng khóa riêng của mình và gởi cho Alice. Alice sẽ dùng khóa chung của Bob để giải mã digest do Bob gởi tới và tính digest của message đã được gởi đi, sau đó so sánh hai digest này với nhau. Nếu trùng nhau, có nghĩa Alice có thể tin chắc là mình đang nói chuyện với Bob.<br/> <br/> Digest thực chất là chỉ là một số nguyên(integer). Hai thuật toán phổ biến được dùng để tạo digest là MD5 hash 128bit, SHA hash 160 bit. Ai đó có được digest của Bob cũng không thể nào suy luận ra được message nguyên bản(original) vì digest chỉ là giá trị hash một chiều. Hai message khác nhau sẽ có digest khác nhau, khả năng trùng nhau xấp xỉ là 0.<br/> <br/> <b>2. Chữ kí điện tử (digital signature)</b><br/> <br/> Theo cách ở trên thì Bob đã kí(sign) message do Alice gởi tới, nhở như ai đó đã thay đổi message này thì sao? Vì vậy cần thay đổi một chút như sau:<br/> <br/> <blockquote>A-&gt;B Chào, Có phải Bob đó không?<br/> B-&gt;A Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob&nbsp;<br/> 		</blockquote><br/> <br/> Như bạn thấy Bob không hề kí message của Alice. Thay vào đó, Bob sẽ gởi một mesage khác(không bị mã hóa) và digest của của message này (đã được mã hóa bằng khóa riêng của Bob) đến cho Alice. Bob chỉ tin tưởng vào chính mình. Alice dễ dàng thẩm tra Bob bằng cách dùng khóa chung của Bob giải mã digest nhận được, sau đó tính digest của message nhận từ Bob và so sánh hai digest này với nhau. Digest mà Bob gởi tới Alice chính là một chữ kí điện tử. Nó kí cho message "Alice, Mình là Bob đây!" để đảm bảo chắc chắn là message này không bị ai đó thay đổi gì khi đến Alice. Nếu thay đổi Alice sẽ biết ngay qua việc thẩm tra digest.<br/> <br/> <br/> <br/> <b>3. Trao khóa chung</b><br/> <br/> Bob trao khóa chung của mình cho Alice bằng cách nào? Bạn hãy xem thử giao thức sau:<br/> <br/> <blockquote>A-&gt;B Xin chào!<br/> B-&gt;A Chào, Mình là Bob. Đây là khóa chung của mình!<br/> A-&gt;B Hãy đưa bằng chứng đi!<br/> B-&gt;A Alice, Mình là Bob đây!<br/> digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob&nbsp;<br/> 		</blockquote><br/> <br/> Với cách này thì ai cũng có thể giả mạo Bob và trao khóa chung của họ cho Alice, làm cho Alice tưởng lầm là mình đang nói chuyện với Bob.<br/> <br/> Để giải quyết vấn đề này, Alice và Bob có thể dùng giấy chứng nhận điện tử<br/> <br/> <b>4. Giấy chứng nhận điện tử (digital certificate)</b><br/> <br/> Giấy chứng nhận điện tử dùng để chứng nhận khóa chung của một cá nhân nào đó. Một giấy chứng nhận điện tử thường bao gồm các thứ sau:<br/> tên cơ quan cấp giấy chứng nhận (issuer's name)<br/> tên thực thể(entity) được cấp giấy chứng nhận(còn được gọi là đối tượng - subject)<br/> khóa chung của subject<br/> tem thời gian(time-stamps) cho biết thời gian có hiệu lực của giấy chứng nhận<br/> Chỉ có các cơ quan có thẩm quyền Certificate Authority (thường được gọi tắt là CA) mới đươc phép cấp giấy chứng nhận. Giấy chứng nhận được kí bằng khóa riêng của người cấp. CA cũng được tổ chức theo dạng cây "hierarchy" tương tự như domain-name. Dĩ nhiên bạn cũng có thể tạo ra một CA mới cho riêng cho mình.<br/> <br/> Chúng ta hãy xem giao thức mới này:<br/> <br/> <blockquote>A-&gt;B Xin chào!<br/> B-&gt;A Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> A-&gt;B Hãy đưa bằng chứng đi!<br/> B-&gt;A Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob&nbsp;<br/> 		</blockquote><br/> <br/> Ai đó dùng giấy chứng nhận của Bob để giả mạo Bob sẽ bị Alice phát hiện ngay!<br/> <br/> <blockquote>A-&gt;M Xin chào<br/> M-&gt;A Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> A-&gt;M Hãy đưa bằng chứng đi!<br/> M-&gt;A ???&nbsp;<br/> 		</blockquote><br/> <br/> Mallet không biết khóa riêng của Bob nên không thể xây dựng được message để Alice có thể tin mình là Bob.<br/> <br/> <b>5. Trao đổi khóa bí mật (secret-key)</b><br/> <br/> Sau khi Alice đã xác thực mình đang nói chuyện với Bob, Alice sẽ gởi cho Bob một message đã bị mã hóa bằng khóa chung của Bob:<br/> <br/> <blockquote>A-&gt;B {khóa bí mật}khóa-chung-của-bob&nbsp;<br/> 		</blockquote><br/> <br/> <u>Bằng cách này, chỉ có Bob mới có thể giải mã message trên và lấy được khóa bí mật bởi vì chỉ có Bob mới biết được khóa riêng để giải mã</u>. Trao đổi khóa bí mật bằng công nghệ khóa chung cực kì an toàn. Không một ai ngoại trừ Alice và Bob biết được khóa bí mật. Khóa bí mật này còn được biết đến với cái tên là khóa phiên(session key). Kể từ đây Alice và Bob sẽ dùng khóa phiên để trao đổi dữ liệu cho nhau. Khóa phiên được tạo ra trong mỗi phiên kết nối SSL và hoàn toàn bí mật(chỉ có Alice và Bob biết) nên rất an toàn. Công nghệ chuyên chở khóa phiên bằng khóa chung và dùng khóa phiên như một khóa đối xứng bí mật để trao đổi dữ liệu cho nhau còn được biết đến với cái tên là mã hóa dùng khóa lai ghép(hybrid), tức là kết hợp cả hai phương pháp mã hóa dung khóa đối xứng và khóa chung-khóa riêng.<br/> <br/> Đây là giao thức mới:<br/> <br/> <blockquote>A-&gt;B Xin chào!<br/> B-&gt;A Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> A-&gt;B Hãy đưa bằng chứng đi!<br/> B-&gt;A Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob<br/> A-&gt;B Ok Bob, Đây là {khóa bí mật}khóa-chung-của-bob<br/> B-&gt;A {message 1}khóa-bí-mật<br/> B-&gt;A {message 2}khóa-bí-mật<br/> ...&nbsp;<br/> 		</blockquote><br/> <b>6. Tấn công man-in-the-middle</b><br/> <br/> Giao thức trên chưa phải là an toàn tuyệt đối. Mallet ngồi giữa Alice và Bob có thể chơi trò tấn công man-in-the-middle như sau:<br/> <br/> <blockquote>A-&gt;M Xin chào!<br/> M-&gt;B Xin chào!<br/> <br/> B-&gt;M Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> M-&gt;A Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> <br/> A-&gt;M Hãy đưa bằng chứng đi!<br/> M-&gt;B Hãy đưa bằng chứng đi!<br/> <br/> B-&gt;M Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob<br/> M-&gt;A Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob<br/> <br/> A-&gt;M Ok Bob, đây là {khóa bí mật}khóa-chung-của-bob<br/> M-&gt;B Ok Bob, đây là {khóa bí mật}khóa-chung-của-bob<br/> <br/> B-&gt;M {some message}khóa-bí-mật<br/> M-&gt;A Xén[{some message}khóa-bí-mật]&nbsp;<br/> 		</blockquote><br/> Mallet sẽ chuyển tiếp dữ liệu giữa Alice và Bob cho đến khi họ trao đổi khóa bí mật. Tại thời điểm này Alice nghĩ rằng mình đang nói chuyện với Bob nên tin tưởng hoàn toàn vào các message do Bob gởi tới. Thực chất không phải là như vậy. Mallet mặc dù không biết khóa bí mật nhưng hoàn toàn có thể xén, thêm hoặc sửa đổi gì đó trên các dữ liệu được gởi từ Bob đến Alice.<br/> <br/> <b>7. Mã xác thực thông điệp (MAC)</b><br/> <br/> Để ngăn chặn cuộc tấn công man-in-the-middle trên, Alice và Bob có thể dùng thêm mã xác thực thông điệp (Message Authentication Code) thường được gọi tắt là MAC. Thuật toán tạo MAC khá đơn giản:<br/> <br/> <br/> <span class="quotetxt"><b>Code:</b></span><br/><br/> 		<div class="coded""><br/> 		<pre>MAC = Digest&#91;some message, khóa bí mật&#93;</pre><br/> 		</div><br/> <br/> Mallet không biết khóa bí mật nên không tài nào tính đúng giá trị digest của message. Thậm chí nếu Mallet có cắt xén random các message thì tỉ lệ thành công là rất thấp vì dữ liệu digest vô cùng lớn. Ví dụ, nếu dùng MD5, Alice và Bob có thể gởi kèm MAC 128bit trong các message. Mallet cần trúng giá trị MAC nếu muốn tấn công man-in-the-middle với khả năng thành công là 1/18.446.744.073.709.551.616 khả năng trong một thời gian vô cùng ngắn.<br/> <br/> Đây là toàn bộ giao thức:<br/> <br/> <blockquote><b>A-&gt;B Xin chào!<br/> B-&gt;A Chào, Mình là Bob. Đây là giấy chứng nhận của mình!<br/> A-&gt;B Hãy đưa bằng chứng đi! <br/> B-&gt;A Alice, Mình là Bob đây!<br/> {digest[Alice, Mình là Bob đây!]}khóa-riêng-của-bob<br/> A-&gt;B Ok Bob, đây là {khóa bí mật}khóa-chung-của-bob<br/> {some message, MAC}khóa-bí-mật</b>&nbsp;<br/> 		</blockquote><br/> <br/> (bài viết của vicky group)</div>
						</td>
					</tr>

					<tr>
						<td align="left"><a href="http://digg.com/submit?phrase=2&url=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/digg.gif" align="texttop" alt="[digg]" title="[digg]"></a>
<a href="http://del.icio.us/post?url=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/delicious.gif" align="texttop" alt="[delicious]" title="[delicious]"></a>
<a href="http://www.google.com/bookmarks/mark?op=edit&output=popup&bkmk=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/google.gif" align="texttop" alt="[google]" title="[google]"></a>
<a href="http://bookmarks.yahoo.com/toolbar/savebm?opener=tb&u=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/yahoo.gif" align="texttop" alt="[yahoo]" title="[yahoo]"></a>
<a href="http://technorati.com/faves?add=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/technorati.gif" align="texttop" alt="[technorati]" title="[technorati]"></a>
<a href="http://reddit.com/submit?url=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/reddit.gif" align="texttop" alt="[reddit]" title="[reddit]"></a>
<a href="http://www.stumbleupon.com/submit?url=http://www.hvaonline.net/hvaonline/readingRoom/item/80214.hva"><img src="/hvaonline/templates/viet/images/stumbleupon.gif" align="texttop" alt="[stumbleupon]" title="[stumbleupon]"></a></td>
					</tr>
				</table>
			</td>
		</tr>



		<tr>
			<td align="left" valign="top">
				<a href="#topPage"><img src="/hvaonline/templates/viet/images/goup.gif" align="absbottom" border="0" alt="Go to top" title="Go to top"></a>
				<a href="/hvaonline/posts/list/0/13472.hva#80214" target="_blank"><img src="/hvaonline/templates/viet/images/goright.gif" border="0" align="absbottom" alt="Go to original post" title="Go to original post"></a> 
				&nbsp;
			</td>
			<td align="right">	<table cellspacing="0" cellpadding="0" border="0">
		<tr>			  
			<td nowrap="nowrap">
				<form action="" name="f" id="f" accept-charset="UTF-8">
					<select onchange="if(this.options[this.selectedIndex].value > 0){ document.location = '/hvaonline/readingRoom/show/'+ this.options[this.selectedIndex].value +'.hva'; }" name="select">
						<option value="0" selected="selected">Go to Category</option>	
						<option value="0">------------------------</option>	
								<option value="1">Defense</option>
								<option value="2">Exploit</option>
								<option value="3">Reverse Engineering</option>
								<option value="4">*nix</option>
								<option value="5">Windows</option>
								<option value="6">Networking</option>
								<option value="7">Others</option>
					</select>
				</form>
			</td>
		</tr>
	</table>
</td>
		</tr>
</table>
<script type="text/javascript">
		var ctlTop = false;
		var ctlBt = false;

		function activateControllerTop()
		{
			ctlTop = !ctlTop;
			document.getElementById("controllerTop").style.display = (ctlTop ? "" : "none");
			document.getElementById("controllerTop").style.display = (ctlTop ? "" : "none");
			document.getElementById("controllerTop").style.display = (ctlTop ? "" : "none");

			if (ctlTop) {
				document.location = document.location + "#ctlTop";
			}
		}

		function activateControllerBottom()
		{
			ctlBt = !ctlBt;
			document.getElementById("controllerBottom").style.display = (ctlBt ? "" : "none");
			document.getElementById("controllerBottom").style.display = (ctlBt ? "" : "none");
			document.getElementById("controllerBottom").style.display = (ctlBt ? "" : "none");

			if (ctlBt) {
				document.location = document.location + "#ctlBt";
			}
		}
</script>

	<tr>	
		<td align="center">
		<br>
					</td>
	</tr>

	<tr>
		<td align="center">
			<span class="copyright">Powered by JForum - Extended by <a href="MailTo:lienlac@hvaonline.net">HVAOnline</a><br>
			&nbsp;hvaonline.net&nbsp; | &nbsp;hvaforum.net&nbsp; | &nbsp;hvazone.net&nbsp; | &nbsp;hvanews.net&nbsp; | &nbsp;vnhacker.org<br>
			1999 - 2013 &copy;
			v2012|0504|218|
		  </span>
	  </td>
	</tr>
<iframe src="/hvaonline/templates/ping_session.jsp" height="0" width="0" frameborder="0" scrolling="no"></iframe>
</body>
</html>
